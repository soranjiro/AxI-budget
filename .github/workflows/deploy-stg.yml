# name: Deploy to Staging

# on:
#   push:
#     branches: [ develop ]
#   workflow_dispatch:
#     inputs:
#       frontend-artifact:
#         description: 'Frontend build artifact name (optional)'
#         required: false
#         type: string
#       backend-artifact:
#         description: 'Backend Lambda artifact name (optional)'
#         required: false
#         type: string

# env:
#   AWS_REGION: ap-northeast-1
#   ENVIRONMENT: dev

# jobs:
#   # Run tests if no artifacts provided
#   test-frontend:
#     if: ${{ !inputs.frontend-artifact }}
#     uses: ./.github/workflows/test-frontend.yml

#   test-backend:
#     if: ${{ !inputs.backend-artifact }}
#     uses: ./.github/workflows/test-backend.yml

#   # Deploy to staging
#   deploy-staging:
#     runs-on: ubuntu-latest
#     needs: [test-frontend, test-backend]
#     if: always() && !failure()
#     environment:
#       name: staging
#       url: https://dev.axi-budget.example.com

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v3
#       with:
#         terraform_version: 1.5.0

#     - name: Deploy infrastructure
#       working-directory: ./infrastructure
#       run: |
#         terraform init
#         terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}
#         terraform plan -var="environment=${{ env.ENVIRONMENT }}"
#         terraform apply -auto-approve -var="environment=${{ env.ENVIRONMENT }}"

#     - name: Download Lambda artifact
#       uses: actions/download-artifact@v4
#       with:
#         name: ${{ inputs.backend-artifact || format('lambda-deployment-{0}', github.sha) }}
#         path: ./

#     - name: Update Lambda function
#       run: |
#         aws lambda update-function-code \
#           --function-name axi-budget-${{ env.ENVIRONMENT }}-api \
#           --zip-file fileb://lambda-deployment.zip

#     - name: Wait for Lambda update
#       run: |
#         aws lambda wait function-updated \
#           --function-name axi-budget-${{ env.ENVIRONMENT }}-api

#     - name: Download frontend build
#       uses: actions/download-artifact@v4
#       with:
#         name: ${{ inputs.frontend-artifact || format('frontend-build-{0}', github.sha) }}
#         path: frontend-build/

#     - name: Deploy frontend to S3
#       run: |
#         BUCKET_NAME=$(terraform -chdir=infrastructure output -raw s3_bucket_name)
#         echo "Deploying to S3 bucket: $BUCKET_NAME"

#         aws s3 sync frontend-build/ s3://$BUCKET_NAME/ --delete --cache-control "public, max-age=31536000" --exclude "*.html"
#         aws s3 sync frontend-build/ s3://$BUCKET_NAME/ --delete --cache-control "public, max-age=0" --exclude "*" --include "*.html"

#     - name: Invalidate CloudFront cache
#       run: |
#         DISTRIBUTION_ID=$(terraform -chdir=infrastructure output -raw cloudfront_distribution_id)
#         echo "Invalidating CloudFront distribution: $DISTRIBUTION_ID"

#         aws cloudfront create-invalidation \
#           --distribution-id $DISTRIBUTION_ID \
#           --paths "/*"

#     - name: Run health check
#       run: |
#         DOMAIN_NAME=$(terraform -chdir=infrastructure output -raw domain_name)
#         echo "Running health check on: https://$DOMAIN_NAME"

#         # Wait for deployment to propagate
#         sleep 30

#         # Check if the site is accessible
#         curl -f -s -o /dev/null -w "%{http_code}" https://$DOMAIN_NAME | grep -q "200" || exit 1
#         echo "‚úÖ Staging deployment successful!"

#     - name: Notify deployment status
#       if: always()
#       run: |
#         if [ "${{ job.status }}" == "success" ]; then
#           echo "üéâ Staging deployment completed successfully!"
#         else
#           echo "‚ùå Staging deployment failed!"
#         fi
