name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-1

jobs:
  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run type check
      run: npm run type-check

    - name: Run linter
      run: npm run lint

    - name: Run unit tests
      run: npm test

    - name: Build
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: backend/target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Format check
      run: cargo fmt -- --check

    - name: Clippy check
      run: cargo clippy -- -D warnings

    - name: Run tests
      run: cargo test

    - name: Build for Lambda
      run: |
        rustup target add x86_64-unknown-linux-musl
        cargo build --release --target x86_64-unknown-linux-musl
        cp target/x86_64-unknown-linux-musl/release/axi-budget-backend bootstrap
        zip lambda-deployment.zip bootstrap

    - name: Upload Lambda artifact
      uses: actions/upload-artifact@v4
      with:
        name: lambda-deployment
        path: backend/lambda-deployment.zip

  # E2E Tests
  e2e-test:
    runs-on: ubuntu-latest
    needs: [frontend-test]
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Upload E2E results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/

  # Deploy to Development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy infrastructure
      working-directory: ./infrastructure
      run: |
        terraform init
        terraform workspace select dev || terraform workspace new dev
        terraform plan -var="environment=dev"
        terraform apply -auto-approve -var="environment=dev"

    - name: Download Lambda artifact
      uses: actions/download-artifact@v4
      with:
        name: lambda-deployment
        path: ./

    - name: Update Lambda function
      run: |
        aws lambda update-function-code \
          --function-name axi-budget-dev-api \
          --zip-file fileb://lambda-deployment.zip

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend-build/

    - name: Deploy frontend to S3
      run: |
        BUCKET_NAME=$(terraform -chdir=infrastructure output -raw s3_bucket_name)
        aws s3 sync frontend-build/ s3://$BUCKET_NAME/ --delete

        DISTRIBUTION_ID=$(terraform -chdir=infrastructure output -raw cloudfront_distribution_id)
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

  # Deploy to Production
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, e2e-test]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy infrastructure
      working-directory: ./infrastructure
      run: |
        terraform init
        terraform workspace select prod || terraform workspace new prod
        terraform plan -var="environment=prod" -var="enable_deletion_protection=true"
        terraform apply -auto-approve -var="environment=prod" -var="enable_deletion_protection=true"

    - name: Download Lambda artifact
      uses: actions/download-artifact@v4
      with:
        name: lambda-deployment
        path: ./

    - name: Update Lambda function
      run: |
        aws lambda update-function-code \
          --function-name axi-budget-prod-api \
          --zip-file fileb://lambda-deployment.zip

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend-build/

    - name: Deploy frontend to S3
      run: |
        BUCKET_NAME=$(terraform -chdir=infrastructure output -raw s3_bucket_name)
        aws s3 sync frontend-build/ s3://$BUCKET_NAME/ --delete

        DISTRIBUTION_ID=$(terraform -chdir=infrastructure output -raw cloudfront_distribution_id)
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
